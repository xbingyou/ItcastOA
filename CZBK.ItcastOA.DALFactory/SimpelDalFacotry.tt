<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#><#@
 output extension=".cs"#>
 
<#

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

string inputFile =@"..\\CZBK.ItcastOA.Model\\OracleModel.edmx";

EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = code.VsNamespaceSuggestion();

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

#>

using CZBK.ItcastOA.IDAL;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

namespace CZBK.ItcastOA.DALFactory
{
    public partial class AbstractFactory
    {

<#
foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{    
#>		
	    public static I<#=string.Concat(entity.Name.First<char>().ToString().ToUpper(),entity.Name.ToLower().Substring(1))#>Dal Create<#=string.Concat(entity.Name.First<char>().ToString().ToUpper(),entity.Name.ToLower().Substring(1))#>Dal()
        {
		 string fullClassName = NameSpace + ".<#=string.Concat(entity.Name.First<char>().ToString().ToUpper(),entity.Name.ToLower().Substring(1))#>Dal";
          return CreateInstance(fullClassName) as I<#=string.Concat(entity.Name.First<char>().ToString().ToUpper(),entity.Name.ToLower().Substring(1))#>Dal;
        }
<#}#>
	}
	
}